"""
This will scrape and create a current prediction table from the environment
Canada website. The output table will be in the format of US current tables
generated by NOAA in CSV format. These will require adjustments for specific
way points, as only the base station information is available from Env.
Canada, as opposed to already corrected tables for each area in the US.

Note that original times are given in local 12 hour time and this will
convert to 24 hour, DST adjusted Pacific Standard Time
"""


import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, timezone
import csv
import re

monthly_tables = {}
output_table = []
month_pattern = re.compile(r'(\w*)\s(\d\d\d\d)', re.VERBOSE)
result = requests.get("http://www.tides.gc.ca/eng/data/table/2019/"
                      "curr_ref/5000")
src = result.content
soup = BeautifulSoup(src, 'lxml')
months = soup.findAll('caption')

#  Create a dictionary with all the months from the table
for month in soup.findAll('caption'):
    monthly_tables[month.get_text()] = []

    #  Save table for each month as list array in value of each month
    table = month.find_parent('table')
    rows = table.findChildren('tr')
    for row in rows:
        tide = []
        monthly_tables[month.get_text()].append(tide)
        cells = row.findChildren('td')
        for cell in cells:
            value = cell.get_text()
            # Replace missing data with None
            if value == '\xa0':
                value = None
            tide.append(value)

#  remove the two header rows that don't contain 'td' which show as empty lists
for i in monthly_tables.keys():
    monthly_tables[i] = monthly_tables[i][2:]


# convert day to proper datetime string
def convert_date(day, mon, year):
    combined_string = year + mon + day
    formatted_date = datetime.strptime(combined_string, '%Y%B%d')
    return formatted_date.date()


# convert time to proper datetime format, adjusting for daylight savings
def convert_time(date, time):
    time = datetime.strptime(time, '%I:%M %p')
    time = datetime.time(time)
    formatted_time = datetime.combine(date, time)
    return formatted_time

# convert dates and times in monthly tables to datetime format
for i in monthly_tables.keys():
    current_table = monthly_tables[i]
    for entry in current_table[:3]:
        day = entry[0]
        key_name = re.search(month_pattern, i)
        month = key_name.group(1)
        year = key_name.group(2)
        entry[0] = convert_date(day, month, year)
        if entry[1]:
            entry[1] = convert_time(entry[0], entry[1])
        else:
            continue
        if entry[2]:
            entry[2] = convert_time(entry[0], entry[2])
        else:
            continue

# correct

